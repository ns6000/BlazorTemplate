@page
@using BlazorTemplate.Shared.Resources

<!DOCTYPE html>

<html lang="en">
	<head>
		<title>Blazor Template</title>

		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

		<base href="/">
		<link href="css/bootstrap/bootstrap.min.css" rel="stylesheet">
		<link href="css/app.css" rel="stylesheet">
		<link href="css/client.css" rel="stylesheet">
		<link href="BlazorTemplate.Client.styles.css" rel="stylesheet">

		<script src="_framework/blazor.webassembly.js" autostart="false" defer></script>
	</head>

	<body>
		<div id="app">
			<div class="d-flex flex-column justify-content-center align-items-center min-vh-100">
				<div class="card w-25">
					<div class="card-body">
						<div class="card-title fw-bolder">
							Loading...
						</div>
						<div class="progress my-1" role="progressbar" style="height: 4px;">
							<div id="progressBar" class="progress-bar" style="width: 10%;"></div>
						</div>
						<div id="progressLabel" class="text-muted text-truncate small">
							Starting from cache
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="blazor-error-ui">
			An unhandled error has occurred.
			<a href="" class="reload">Reload</a>
			<a class="dismiss">🗙</a>
		</div>

		<script>
			window.browserLanguage	= () => navigator.language;
			window.blazorCulture	= {
				get: ()		=> window.localStorage['BlazorCulture'],
				set: value	=> window.localStorage['BlazorCulture'] = value
			};

			window.addEventListener('DOMContentLoaded', () => {
				let loadedCount				= 0;
				const resourcesToLoad		= [];
				const progressBar			= document.getElementById('progressBar');
				const progressLabel			= document.getElementById('progressLabel');

				Blazor.start({
					loadBootResource(type, fileName, defaultUri, integrity)
					{
						if(type === "dotnetjs")
							return defaultUri;

						const fetchResources = fetch(defaultUri, {
							cache:		'no-cache',
							integrity:	integrity
						});

						resourcesToLoad.push(fetchResources);

						fetchResources.then(resource => {
							loadedCount += 1;

							if(fileName === "blazor.boot.json")
								return;

							const totalCount	= resourcesToLoad.length;
							const percentLoaded = 10 + parseInt((loadedCount * 90.0) / totalCount);

							progressBar.style.width = `${percentLoaded}%`;
							progressLabel.innerText = percentLoaded === 100
								? '@Test.AplikaceSeSpousti'
								: `@Test.Stahovani ${loadedCount} / ${totalCount}: ${fileName}`;
						});

						return fetchResources;
					}
				});
			});
		</script>
	</body>
</html>