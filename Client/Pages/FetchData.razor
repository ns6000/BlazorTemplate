@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {
	private WeatherForecast[]? forecasts = null;

	protected override async Task OnInitializedAsync()
	{
		HttpResponseMessage loginResponse = await Http.PostAsJsonAsync<LoginRequest>(Routes.Identity.Login, new RegistrationRequest {
			Login		= "test",
			Password	= "Xxxxx123!"
		});

		Http.DefaultRequestHeaders.Authorization = new("Bearer", await loginResponse.Content.ReadAsStringAsync());
		forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

		//(string login, string password) = ("test", "Xxxxx123!");

		//HttpResponseMessage registerResponse = await Http.PostAsJsonAsync<RegistrationRequest>(Routes.Identity.Register, new RegistrationRequest {
		//	Login			= login,
		//	Password		= password,
		//	PasswordVerify	= password,
		//	Email			= "test@test.org"
		//});

		//registerResponseStr = $"{(int)registerResponse.StatusCode} ({registerResponse.StatusCode})     {await registerResponse.Content.ReadAsStringAsync()}";

		//HttpResponseMessage loginResponse = await Http.PostAsJsonAsync<LoginRequest>(Routes.Identity.Login, new RegistrationRequest {
		//	Login		= login,
		//	Password	= password
		//});

		//loginResponseStr = $"{(int)loginResponse.StatusCode} ({loginResponse.StatusCode})      {await loginResponse.Content.ReadAsStringAsync()}";
	}
}
