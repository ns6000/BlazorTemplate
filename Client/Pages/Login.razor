@page "/login"
@attribute [AllowAnonymous]
@inject NavigationManager navigationManager
@inject AuthenticationService authenticationService
@inject HttpClient tempHttpClient


<EditForm Model="loginRequest" OnValidSubmit="OnLogin" class="w-25 mt-5">
	<FluentValidationValidator />

	<div class="form-group row">
		<label for="email" class="col-md-3 col-form-label">Login:</label>
		<div class="col-md-9">
			<InputText @bind-Value="loginRequest.Login" class="form-control" />
			<ValidationMessage For="@(() => loginRequest.Login)" />
		</div>
	</div>

	<div class="form-group row mt-2">
		<label for="password" class="col-md-3 col-form-label">Password:</label>
		<div class="col-md-9">
			<InputText @bind-Value="loginRequest.Password" type="password" class="form-control" />
			<ValidationMessage For="@(() => loginRequest.Password)" />
		</div>
	</div>

	@if(error is not null) {
		<div class="alert alert-danger my-2 p-1" role="alert">
			<p>@error</p>
		</div>
	}

	<div class="d-flex flex-row justify-content-between mt-2">
		<button type="button" class="btn btn-outline-success" @onclick="OnRegister">Register <span class="text-muted">test / Xxxxx123!</span></button>
		<button type="submit" class="btn btn-success">Login</button>
	</div>
</EditForm>


@code {
	private string? error				= null;
	private LoginRequest loginRequest	= new();

	private async Task OnRegister() =>
		await tempHttpClient.PostAsJsonAsync<RegistrationRequest>(Routes.Identity.Register, new RegistrationRequest {
			Login			= "test",
			Password		= "Xxxxx123!",
			PasswordVerify	= "Xxxxx123!",
			Role			= Roles.User,
			Email			= "test@test.org"
		});

	private async Task OnLogin()
	{
		if(await authenticationService.Login(loginRequest))
			navigationManager.NavigateTo("/");
		else error = Test.WrongLoginPassword;
	}
}